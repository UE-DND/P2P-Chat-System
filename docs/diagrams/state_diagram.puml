@startuml P2P聊天系统状态图

skinparam backgroundColor white
skinparam handwritten false
skinparam defaultFontName Microsoft YaHei
skinparam defaultFontSize 14
skinparam roundCorner 10
skinparam shadowing false

skinparam state {
  BackgroundColor #FFFFFF
  BorderColor #000000
  FontColor #000000
  StartColor #000000
  EndColor #000000
  ArrowColor #000000
}

title P2P_Chat_System - 系统状态转换图

[*] --> 初始化应用

state 初始化应用 {
  [*] --> 实例化CLI控制器
  实例化CLI控制器 --> 创建下载目录 : DirectoryUtils
  创建下载目录 --> 获取用户端口 
  获取用户端口 --> 检查端口可用性 : NetworkUtils
  检查端口可用性 --> 创建网络管理器 : 端口可用
  检查端口可用性 --> 获取用户端口 : 端口不可用
  创建网络管理器 --> 初始化数据库
  初始化数据库 --> 设置本地用户
  设置本地用户 --> [*]
}

初始化应用 --> 主菜单

state 主菜单 {
  [*] --> 显示菜单选项 : MenuDisplay
  显示菜单选项 --> 等待用户选择 : InputHandler
  等待用户选择 --> 发送模式 : 选择"1"
  等待用户选择 --> 接收模式 : 选择"2"
  等待用户选择 --> 关闭资源 : 选择"3"
  等待用户选择 --> 等待用户选择 : 无效输入
}

state 接收模式 {
  [*] --> 显示接收菜单
  显示接收菜单 --> 等待连接 : 选择"1"
  显示接收菜单 --> 主菜单 : 选择"2"
  等待连接 --> 创建服务器套接字 : NetworkManager.startServer()
  创建服务器套接字 --> 监听连接 : NetworkManager.waitForConnection()
  监听连接 --> 握手交换 : 接收到连接请求
  监听连接 --> 超时处理 : 连接超时
  超时处理 --> 监听连接 : 重试
  超时处理 --> 主菜单 : 用户取消
  握手交换 --> 获取远程用户信息 : 发送/接收用户名
  获取远程用户信息 --> 创建聊天会话 : ConnectionHandler
  创建聊天会话 --> 聊天中
}

state 发送模式 {
  [*] --> 创建连接处理器 : ConnectionHandler
  创建连接处理器 --> 获取目标信息
  获取目标信息 --> 输入IP地址 : InputHandler
  输入IP地址 --> 输入端口号 : InputHandler
  输入端口号 --> 连接目标 : NetworkManager.connectToServer()
  连接目标 --> 握手交换 : 连接成功
  握手交换 --> 获取远程用户信息 : NetworkManager.sendHandshakeMessage()
  获取远程用户信息 --> 创建聊天会话 : new ChatSession()
  连接目标 --> 连接失败处理 : 连接失败
  连接失败处理 --> 主菜单
  创建聊天会话 --> 聊天中
}

state 聊天中 {
  [*] --> 初始化会话
  
  state 初始化会话 {
    [*] --> 注册命令
    note right: 创建所有命令实例\n并添加到列表
    注册命令 --> 初始化文件服务
    初始化文件服务 --> 显示历史消息 : ChatRepository.getChatHistory()
    显示历史消息 --> 创建消息处理器 : MessageHandler
    创建消息处理器 --> 启动消息服务 : MessageService.start()
    启动消息服务 --> [*]
  }
  
  初始化会话 --> 会话运行
  
  state 会话运行 {
    [*] --> 检查消息服务状态 : MessageService.isRunning()
    检查消息服务状态 --> 监听用户输入 : 消息服务运行中
    检查消息服务状态 --> [*] : 消息服务已停止 (聊天循环终止)
    
    state 监听用户输入 {
      [*] --> 等待输入
      等待输入 --> 检查输入可用 : System.in.available() > 0
      检查输入可用 --> 读取输入 : 有输入可用
      检查输入可用 --> 等待输入 : 无输入, 短暂休眠
      读取输入 --> 处理输入 : scanner.nextLine()
      处理输入 --> 发送普通消息 : 非命令文本
      处理输入 --> 处理命令 : 以'/'开头

      发送普通消息 --> 等待输入
    }
    
    处理命令 --> 执行命令
    state 执行命令 {
       [*] --> 查找命令
       查找命令 --> 执行HelpCommand : /help
       查找命令 --> 执行FileCommand : /file
       查找命令 --> 执行HistoryCommand : /history
       查找命令 --> 执行ClearCommand : /clear
       查找命令 --> 执行ExitCommand : /exit
       
       执行HelpCommand --> 等待输入
       执行FileCommand --> 等待输入
       执行HistoryCommand --> 等待输入
       执行ClearCommand --> 等待输入
    }
    
    执行命令 -up-> 监听用户输入
    
    执行ExitCommand --> 终止会话
    state 终止会话 {
      [*] --> 停止消息服务 : 在ExitCommand中
      停止消息服务 --> 发送关闭通知 : 在ExitCommand中
      发送关闭通知 --> 关闭网络连接 : 在ExitCommand中
      关闭网络连接 --> [*]
    }
    终止会话 --> [*] : 聊天循环终止
    
    监听用户输入 --> 检查消息服务状态
  }
  
  state 后台消息处理 {
    [*] --> 启动消息线程 : BackgroundService.start()
    启动消息线程 --> 监听网络消息 : MessageService.task()
    监听网络消息 --> 检查连接状态 : NetworkManager.isConnected()
    检查连接状态 --> 接收消息 : 连接正常
    检查连接状态 --> 等待重连 : 未连接
    等待重连 --> 监听网络消息 : 短暂休眠
    接收消息 --> 处理收到的消息 : NetworkManager.receiveTextMessage()
    处理收到的消息 --> 处理退出通知 : 收到"CHAT_CLOSE_NOTIFY"
    处理收到的消息 --> 处理文件传输请求 : 收到"FILE:"前缀
    处理收到的消息 --> 显示普通消息 : 普通文本消息
    处理收到的消息 --> 处理异常 : 接收出错
    处理退出通知 --> [*] : 停止消息服务
    处理文件传输请求 --> 接收文件 : FileTransferService.receiveFile()
    接收文件 --> 保存文件 : 写入到下载目录
    保存文件 --> 监听网络消息
    显示普通消息 --> 保存消息记录 : ChatRepository.saveMessage()
    保存消息记录 --> 监听网络消息
    处理异常 --> [*] : 通知处理器错误
  }
  
  会话运行 --> 清理资源
}

聊天中 --> 清理资源
清理资源 --> 主菜单

state 关闭资源 {
  [*] --> 关闭数据库连接 : ChatRepository.closeConnection()
  关闭数据库连接 --> 关闭网络资源 : NetworkManager.shutdown()
  关闭网络资源 --> [*]
}

关闭资源 --> [*]

note right of 监听用户输入
  这是一个非阻塞的循环，
  通过InputHandler.checkInputAvailable()
  检查是否有用户输入，避免阻塞主线程。
end note

note right of 后台消息处理
  这是一个独立的线程，
  由MessageService继承自BackgroundService，
  负责接收和处理网络消息。
  如果发生异常，会通知消息处理器。
end note

note top of 主菜单
  主菜单是程序的中心状态，
  用户可以从这里进入发送或接收模式，
  或者选择退出程序。
end note

note bottom of 聊天中
  聊天状态同时运行两个并行的状态机：
  1. 会话运行 - 处理用户输入和命令
  2. 后台消息处理 - 监听和处理网络消息
  这两个状态机通过共享的MessageService进行协调。
end note

@enduml 